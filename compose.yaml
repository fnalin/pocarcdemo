name: fansoftpocarc

services:
  # SQL Server Database
  sqlserverdb:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserverdb
    environment:
      SA_PASSWORD: ${SA_PASSWORD}
      ACCEPT_EULA: "Y"
    healthcheck:
      test: [ "CMD-SHELL", "sqlcmd -S localhost -U sa -P $$SA_PASSWORD -Q 'SELECT 1' || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 15
    ports:
      - "1433:1433"
    networks:
      - backend-network
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./infra/database/init.sql:/init.sql
  
  sqlserver-init:
    image: mcr.microsoft.com/mssql-tools
    container_name: sqlserver-init
    depends_on:
      - sqlserver-check
    entrypoint: /bin/bash -c "
      echo '⏳ Waiting a few seconds for SQL Server to fully stabilize...' &&
      sleep 15 &&
      /opt/mssql-tools/bin/sqlcmd -S sqlserverdb -U sa -P ${SA_PASSWORD} -i /init.sql &&
      echo '✅ init.sql executed successfully.'"
    volumes:
      - ./infra/database/init.sql:/init.sql
    networks:
      - backend-network
    
  sqlserver-check:
    image: alpine:latest
    container_name: sqlserver-check
    depends_on:
      - sqlserverdb
    entrypoint: >
      /bin/sh -c "
        echo '⏳ Waiting for SQL Server to accept connections...' &&
        for i in $(seq 1 30); do
          if nc -z sqlserverdb 1433; then
            echo '✅ SQL Server is up!' && exit 0;
          fi;
          echo '⏳ SQL Server not ready yet... retrying in 5s';
          sleep 5;
        done;
        echo '❌ SQL Server did not start in time' && exit 1;
      "
    networks:
      - backend-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.0
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: mssql
      KC_DB_URL: jdbc:sqlserver://sqlserverdb:1433;databaseName=${KEYCLOAK_DATABASE_NAME};encrypt=false
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    volumes:
      - ./infra/keycloak:/opt/keycloak/data/import
    command: start-dev --import-realm
    ports:
      - "8080:8080"
    depends_on:
      sqlserver-check:
        condition: service_completed_successfully
      sqlserver-init:
        condition: service_completed_successfully
    networks:
      - backend-network

  backendapi:
    build:
      context: .
      dockerfile: backend/Fansoft.PocArc.Api/Dockerfile
    container_name: backendapi
    env_file:
      - .env
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: "Server=sqlserverdb;Database=${CUSTOMERS_DATABASE_NAME};User Id=api;Password=${API_USER_PASSWORD};TrustServerCertificate=True;"
      Authentication__Authority: "${AUTHORITY}"
      Authentication__Audience: "${AUDIENCE}"
      Authentication__RequireHttpsMetadata: "${REQUIRE_HTTPS_METADATA}"
    ports:
      - "5001:8080"
    networks:
      - backend-network
    depends_on:
      - keycloak

  front:
    build:
      context: .
      dockerfile: frontend/Fansoft.PocArc.Front/Dockerfile
    container_name: frontend
    env_file:
      - .env
    ports:
      - "3000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Keycloak__TokenUrl=${KEYCLOAK_TOKEN_URL}
      - Keycloak__ClientId=${KEYCLOAK_CLIENT_ID}
      - Keycloak__ClientSecret=${KEYCLOAK_CLIENT_SECRET}
      - Backend__BaseUrl=${BACKEND_BASE_URL}
    depends_on:
      - backendapi
    networks:
      - backend-network

networks:
  backend-network:

volumes:
  sqlserver_data:

